{
  "version": 3,
  "file": "app.js",
  "sources": [
    "tmp/transpiled/app/adapter.js",
    "tmp/transpiled/app/app.js",
    "tmp/transpiled/app/components/bean-homeruns.js",
    "tmp/transpiled/app/components/bean-leaderboard.js",
    "tmp/transpiled/app/components/bean-player-profile.js",
    "tmp/transpiled/app/components/bean-player.js",
    "tmp/transpiled/app/components/bean-production.js",
    "tmp/transpiled/app/components/bean-quadrant.js",
    "tmp/transpiled/app/components/bean-standings.js",
    "tmp/transpiled/app/components/bean-table.js",
    "tmp/transpiled/app/components/bean-team-standing.js",
    "tmp/transpiled/app/controllers/application.js",
    "tmp/transpiled/app/controllers/filter.js",
    "tmp/transpiled/app/controllers/filter_item.js",
    "tmp/transpiled/app/controllers/quadrant.js",
    "tmp/transpiled/app/controllers/quadrant_player.js",
    "tmp/transpiled/app/controllers/standings.js",
    "tmp/transpiled/app/flags.js",
    "tmp/transpiled/app/initializers/connection_manager.js",
    "tmp/transpiled/app/initializers/csv.js",
    "tmp/transpiled/app/initializers/watcher.js",
    "tmp/transpiled/app/models/player.js",
    "tmp/transpiled/app/models/quadrant_player.js",
    "tmp/transpiled/app/models/team_listing.js",
    "tmp/transpiled/app/routes.js",
    "tmp/transpiled/app/routes/application.js",
    "tmp/transpiled/app/store.js",
    "tmp/transpiled/app/utils/aggregate_players.js",
    "tmp/transpiled/app/utils/csv.js",
    "tmp/transpiled/app/utils/group_by.js",
    "tmp/transpiled/app/utils/index_by.js",
    "tmp/transpiled/app/utils/percentage_of_data.js",
    "tmp/transpiled/app/views/filter.js",
    "tmp/transpiled/app/ziggrid/connection_manager.js",
    "tmp/transpiled/app/ziggrid/demux.js",
    "tmp/transpiled/app/ziggrid/generator.js",
    "tmp/transpiled/app/ziggrid/observer.js",
    "tmp/transpiled/app/ziggrid/watcher.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACflEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACl
  "sourcesContent": [
    "define(\"appkit/adapter\",\n  [],\n  function() {\n    \"use strict\";\n    var Adapter = DS.Adapter.extend({\n      /** Start the ball rolling by 'finding' a table.  We ignore the 'type' and just look at the 'id' as the table name\n       */\n      findQuery: function(store, type, opts, array) {\n        throw new Error('findQuery not yet supported');\n      },\n\n      find: function(store, type, id) {\n        throw new Error('FindById not supported - use watch()');\n      },\n\n      // I'm not sure that I really want to support this behavior\n      // But at least it's not one at a time\n      createRecords: function(store, type, set) {\n        throw new Error('Create not yet supported');\n      },\n\n      createRecord: function() {\n        throw new Error('Create not yet supported');\n      },\n\n      updateRecord: function() {\n        throw new Error('Ziggrid does not support updating');\n      },\n\n      deleteRecord: function() {\n        throw new Error('Ziggrid does not support deleting');\n      },\n\n      toString: function() {\n        return 'Ziggrid.Adapter';\n      }\n    });\n\n\n\n    return Adapter;\n  });",
    "define(\"appkit/app\",\n  [\"appkit/utils/percentage_of_data\",\"resolver\",\"appkit/store\",\"appkit/ziggrid/demux\",\"appkit/models/player\",\"appkit/initializers/watcher\",\"appkit/initializers/csv\",\"appkit/initializers/connection_manager\",\"appkit/routes\",\"appkit/components/bean-production\",\"appkit/components/bean-leaderboard\",\"appkit/components/bean-homeruns\"],\n  function(__dependency1__, Resolver, Store, demux, Player, watcherInitializer, csvInitializer, connectionManagerInitializer, routes, BeanProduct, BeanLeaderboard, BeanHomeruns) {\n    \"use strict\";\n    var precision = __dependency1__.precision;\n\n    // Enable late registration helpers/components\n    Ember.FEATURES['container-renderables'] = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: 'appkit', // TODO: loaded via config\n      Store: Store,\n      Resolver: Resolver,\n      gameDateRanges: {\n        '2006': [92, 274],\n        '2007': [91, 274],\n        '2008': [85, 274],\n        '2009': [95, 279],\n        '2010': [94, 276],\n        '2011': [90, 271],\n        '2012': [88, 277]\n      }\n    });\n\n    App.initializer(watcherInitializer);\n    App.initializer(csvInitializer);\n    App.initializer(connectionManagerInitializer);\n\n    App = App.create();\n    App.Router.map(routes); // TODO: just resolve the router\n    App.deferReadiness(); // defering to allow sync boot with Ziggrid\n\n    function round(val) {\n      if (!isNaN(val) && !/^\\d+$/.test(val)) {\n        return val.toFixed(3);\n      } else {\n        return (val || val === 0) ? val : 'N/A';\n      }\n    }\n\n    App.register('helper:round', Ember.Handlebars.makeBoundHelper(round));\n\n    App.register('helper:name-from-code', Ember.Handlebars.makeBoundHelper(function(code) {\n      return Player.nameFromCode(code) || code;\n    }));\n\n    App.register('helper:precision', Ember.Handlebars.makeBoundHelper(function(value, p) {\n      return precision(value, p);\n    }));\n\n    App.register('helper:quadrant-value', Ember.Handlebars.makeBoundHelper(function(value) {\n      //value = (value && value > 0 && value < 3) ? value : -1; //Math.random() * 0.3 + 0.3;\n      return round(value);\n    }));\n\n\n\n    // TODO: happier way to do this automatically?\n    // This way is bad because the component subclasses don't\n    // get their injections...\n    Ember.Handlebars.helper('bean-production', BeanProduct);\n    Ember.Handlebars.helper('bean-leaderboard', BeanLeaderboard);\n    Ember.Handlebars.helper('bean-homeruns', BeanHomeruns);\n\n    // For our range input in bean-player\n    Ember.TextField.reopen({\n      attributeBindings: ['step', 'min', 'max']\n    });\n\n\n    return App;\n  });",
    "define(\"appkit/components/bean-homeruns\",\n  [\"appkit/components/bean-table\"],\n  function(BeanTable) {\n    \"use strict\";\n\n    var Homeruns = BeanTable.extend({\n      type: 'Leaderboard_homeruns_groupedBy_season',\n      entryType: 'LeaderboardEntry_homeruns_groupedBy_season',\n\n      headers: ['Home Runs', 'HR']\n    });\n\n\n\n    return Homeruns;\n  });",
    "define(\"appkit/components/bean-leaderboard\",\n  [\"appkit/components/bean-table\"],\n  function(BeanTable) {\n    \"use strict\";\n\n    var Leaderboard = BeanTable.extend({\n      type: 'Leaderboard_average_groupedBy_season',\n      entryType: 'LeaderboardEntry_average_groupedBy_season',\n\n      headers: ['Batting Average', 'AVG']\n    });\n\n\n\n    return Leaderboard;\n  });",
    "define(\"appkit/components/bean-player-profile\",\n  [\"appkit/ziggrid/demux\"],\n  function(demux) {\n    \"use strict\";\n\n    var PlayerProfile = Ember.Component.extend({\n      player: null,\n\n      players: function() {\n        var Player = this.container.lookupFactory('model:player');\n        var allStars = Ember.get(Player, 'allStars');\n\n        // just build for real Players the first time\n        // this list doesn't change so we don't care\n        // also the CP caches.\n        return Ember.keys(allStars).map(function(entry) {\n          return allStars[entry];\n        }).map(function(entry) {\n          return Player.create(entry);\n        });\n      }.property(),\n\n      playerWillChange: function() {\n        var oldPlayer = this.get('player');\n        if (oldPlayer) {\n          this.unwatchProfile();\n        }\n      }.observesBefore('player'),\n\n      playerChanged: function() {\n        var newPlayer = this.get('player');\n        if (newPlayer) {\n          this.watchProfile();\n        }\n        this.set('imageFailedToLoad', false);\n      }.observes('player').on('init'),\n\n      watchHandle: null,\n      profile: null,\n\n      watchProfile: function() {\n\n        var handle = ++demux.lastId;\n\n        this.set('watchHandle', handle);\n        this.set('profile', null);\n\n        var player = this;\n        demux[handle] = {\n          update: function(data) {\n            player.set('profile', data);\n          }\n        };\n\n        var query = {\n          watch: 'Profile',\n          unique: handle,\n          player: this.get('player.code')\n        };\n\n        // Send the JSON message to the server to begin observing.\n        var stringified = JSON.stringify(query);\n        getConnectionManager().send(stringified);\n      },\n\n      unwatchProfile: function() {\n\n        var watchHandle = this.get('watchHandle');\n\n        if (!watchHandle) {\n          throw new Error('No handle to unwatch');\n        }\n\n        getConnectionManager().send(JSON.stringify({\n          unwatch: watchHandle\n        }));\n\n        this.set('watchHandle', null); // clear handle\n      },\n\n      // TODO: combine the various player car\n      imageFailedToLoad: false,\n      imageUrl: function() {\n\n        if (this.get('imageFailedToLoad')) {\n          return '/players/404.png';\n        }\n\n        var code = this.get('player.code');\n        if (!code) { return; }\n        return '/players/' + code + '.png';\n      }.property('player.code', 'imageFailedToLoad').readOnly(),\n\n      listenForImageLoadingErrors: function() {\n        var component = this;\n\n        this.$('img').error(function() {\n          Ember.run(component, 'set', 'imageFailedToLoad', true);\n        });\n      }.on('didInsertElement')\n    });\n\n    // TODO: inject\n    function getConnectionManager() {\n      return window.App.__container__.lookup('connection_manager:main');\n    }\n\n\n    return PlayerProfile;\n  });",
    "define(\"appkit/components/bean-player\",\n  [],\n  function() {\n    \"use strict\";\n    var Player = Ember.Component.extend({\n      progress: 0,\n      isPlaying: false,\n      progressText: null,\n      showNub: true,\n      _nubProgress: 0,\n      nubProgressIsSynced: true,\n\n      generator: Ember.computed.alias('connectionManager.generator'),\n\n      progressTextStyle: function() {\n        var nubProgress = this.get('nubProgress') || 0;\n        return 'left: ' + (nubProgress * 99 + 0) + '%;';\n      }.property('nubProgress'),\n\n      nubProgress: function(key, val) {\n        if (arguments.length === 2) {\n          // Setter. Gets called when user grabs the nub.\n          if (this.get('progress') - val < 0.03) {\n            this.set('nubProgressIsSynced', true);\n            Ember.run.next(this, 'notifyPropertyChange', 'nubProgress');\n          } else {\n            this.set('nubProgressIsSynced', false);\n            this.set('_nubProgress', val);\n          }\n        } else {\n          // Getter\n          if (this.get('nubProgressIsSynced')) {\n            return this.get('progress');\n          } else {\n            return this.get('_nubProgress');\n          }\n        }\n      }.property('progress', 'nubProgressIsSynced'),\n\n      progressPercentage: function() {\n        return this.get('progress') * 100;\n      }.property('progress'),\n\n      progressBarStyle: function() {\n        return 'width: ' + this.get('progressPercentage') + '%;';\n      }.property('progress'),\n\n      actions: {\n        play: function() {\n          if (this.get('isPlaying')) { return; }\n          this.get('generator').start();\n          this.set('isPlaying', true);\n          this.sendAction('didBeginPlaying');\n        },\n\n        pause: function() {\n          if (!this.get('isPlaying')) { return; }\n          this.get('generator').stop();\n          this.set('isPlaying', false);\n          this.sendAction('didEndPlaying');\n        }\n      }\n    });\n\n\n    return Player;\n  });",
    "define(\"appkit/components/bean-production\",\n  [\"appkit/components/bean-table\"],\n  function(BeanTable) {\n    \"use strict\";\n\n    var Production = BeanTable.extend({\n      type: 'Leaderboard_production_groupedBy_season',\n      entryType: 'LeaderboardEntry_production_groupedBy_season',\n\n      headers: ['Production', 'PR']\n    });\n\n\n\n    return Production;\n  });",
    "define(\"appkit/components/bean-quadrant\",\n  [],\n  function() {\n    \"use strict\";\n    var w = 690,\n        h = 500,\n        radius = 5;\n\n    function playerX(scale) {\n      return function(player) {\n        return scale(Ember.get(player, 'goodness')) + 'px';\n      };\n    }\n\n    function playerY(scale) {\n      return function(player) {\n        return scale(Ember.get(player, 'hotness')) + 'px';\n      };\n    }\n\n    function get(path) {\n      return function(object) {\n        return Ember.get(object, path);\n      };\n    }\n\n    function appendPlayers(players, component) {\n      players.\n        append('span').\n          classed('name', true).\n          text(get('PlayerName'));\n\n      players.\n        append('div').\n        classed('circle', true);\n\n      players.\n        on('click', function(d, i) {\n          clickPlayer.call(this, d, component);\n      });\n    }\n\n    function clickPlayer(playerData, component) {\n      d3.select('.selected').classed('selected', false);\n      var selectedPlayer = component.get('selectedPlayer');\n\n      var selected = d3.select(this);\n\n      if (selectedPlayer === playerData) {\n        deselect(component);\n      } else {\n        component.set('selectedPlayer', playerData);\n        selected.classed('selected', true);\n      }\n    }\n\n    function deselect(component) {\n      component.set('selectedPlayer', null);\n      d3.select('.selected').classed('selected', false);\n    }\n\n    var Quadrant = Ember.Component.extend({\n      selectedPlayer: null,\n      renderGraph: function() {\n        var $container = this.$().find('.quadrant-container');\n        createSVG($container.get(0));\n\n        this.$popup = this.$().find('.quadrant-popup');\n        this.xscale = d3.scale.linear().\n          domain([0, 1]).\n          range([9.5, w-9.5]).\n          clamp(true);\n\n        this.yscale = d3.scale.linear().\n          domain([0, 1]).\n          range([h-9.5, 9.5]).\n          clamp(true);\n\n        this.dataDidChange();\n\n        // TODO: make sure we clean this guy up\n        (function syncPopupPosition(){\n          var selected = $('.selected');\n          var popup = $('.quadrant-popup');\n\n          popup.css({\n            left: selected.css('left'),\n            top: selected.css('top')\n          });\n\n          window.requestAnimationFrame(syncPopupPosition);\n        }());\n\n      }.on('didInsertElement'),\n\n      renderD3: function() {\n        var season = this.get('season');\n\n        var container = d3.select(this.$('.quadrant-graph')[0]);\n        var data = this.get('players').filter(function(player) {\n          return player.hasSeason(season);\n        }).filterBy('realized');\n\n        var component = this;\n\n        var xscale = this.xscale;\n        var yscale = this.yscale;\n\n        var players = container.\n          selectAll('.quadrant-player').\n          data(data, get('name'));\n\n        players.exit().each(fadeOutPlayer).\n          transition().\n          duration(300).\n          style({\n            opacity: 0\n          }).remove();\n\n        players.enter().\n          append('div').\n          attr('data-id', get('name')).\n          attr('data-name', get('humanizedName')).\n          classed('quadrant-player', true).\n          style({\n            opacity: 0,\n            left: playerX(xscale),\n            top: playerY(yscale)\n          }).call(function(players) {\n            players.\n              append('span').\n                classed('name', true).\n                text(get('humanizedName'));\n\n            players.\n              append('div').\n              classed('circle', true);\n\n            players.\n              on('click', function(d, i) {\n                clickPlayer.call(this, d, component);\n              });\n          });\n\n        players.transition().\n          duration(1000).\n          ease('linear').\n          style({\n            opacity: 1,\n            left: playerX(xscale),\n            top: playerY(yscale)\n          });\n\n        function fadeOutPlayer() {\n          if (d3.select(this).classed('selected')) {\n            deselect(component);\n          }\n        }\n      },\n\n      dataDidChange: function() {\n        Ember.run.throttle(this, 'renderD3', 100);\n      }.observes('players.@each.hotness', 'players.@each.goodness', 'season'),\n\n      teardownGraph: function() {\n        // TODO: what kind of teardown does d3 need?\n      }.on('willDestroyElement'),\n\n      click: function(e) {\n        if (e.target.tagName !== 'rect') { return; }\n        deselect(this);\n      }\n    });\n\n    function createSVG(parentElement) {\n      var svg = d3.select(parentElement).append('svg:svg')\n          .attr('width', w)\n          .attr('height', h);\n\n      // gradient\n      var defs = svg.append('svg:defs');\n\n      var backgroundLinearGradient = defs.append('svg:linearGradient').\n        attr('id', 'background-linear-gradient').\n        attr('x1', '0%').\n        attr('y1', '100%').\n        attr('x2', '100%').\n        attr('y2', '0%');\n\n      backgroundLinearGradient.append('svg:stop').\n          attr('offset', '20%').\n          attr('stop-color', '#0A4D65').\n          attr('stop-opacity', 1);\n\n      backgroundLinearGradient.append('svg:stop').\n          attr('offset', '80%').\n          attr('stop-color', '#8D470B').\n          attr('stop-opacity', 1);\n\n      var backgroundRadialGradient = defs.append('svg:radialGradient').\n        attr('id', 'background-radial-gradient').\n        attr('cx', '50%').\n        attr('cy', '50%').\n        attr('r',  '50%').\n        attr('fx', '50%').\n        attr('fy', '50%');\n\n      backgroundRadialGradient.append('svg:stop').\n          attr('offset', '0%').\n          attr('stop-color', 'black').\n          attr('stop-opacity', 0.8);\n\n      backgroundRadialGradient.append('svg:stop').\n          attr('offset', '100%').\n          attr('stop-opacity', 0);\n\n      svg.append('svg:rect').\n          attr('width', w).\n          attr('height', h).\n          style('fill', 'url(#background-linear-gradient)');\n\n      svg.append('svg:rect').\n          attr('width', w).\n          attr('height', h).\n          style('fill', 'url(#background-radial-gradient)');\n      // \\gradient\n      //\n      svg.append('line').\n        attr('stroke-dasharray', '2 2').\n        attr('stroke-width', 0.3).\n        attr('stroke', 'rgba(255, 255, 255, 0.52)').\n        attr('x1', w/2).\n        attr('y1', 0).\n        attr('x2', w/2).\n        attr('y2', h);\n\n      svg.append('line').\n        attr('stroke-dasharray', '2 2').\n        attr('stroke-width', 0.3).\n        attr('stroke', 'rgba(255, 255, 255, 0.52)').\n        attr('y1', h/2).\n        attr('x1', 0).\n        attr('y2', h/2).\n        attr('x2', w);\n    }\n\n\n    return Quadrant;\n  });",
    "define(\"appkit/components/bean-standings\",\n  [],\n  function() {\n    \"use strict\";\n    var get = Ember.get;\n\n    var Table = Ember.Component.extend({\n\n      // Template args\n      league: null,\n      region: null,\n\n      title: Ember.computed.alias('region.name'),\n\n      headers: function() {\n        return [this.get('title'), 'W', 'L'];\n      }.property()\n    });\n\n\n\n    return Table;\n  });",
    "define(\"appkit/components/bean-table\",\n  [\"appkit/ziggrid/demux\"],\n  function(demux) {\n    \"use strict\";\n\n    var Table = Ember.Component.extend({\n\n      // e.g. 'Leaderboard_production_groupedBy_season'\n      type: null,\n\n      // e.g. 'LeaderboardEntry_production_groupedBy_season'\n      entryType: null,\n\n      // unique ID assigned by Watcher\n      handle: null,\n\n      // Have to specify this so that subclasses get it too.\n      templateName: 'components/bean-table',\n\n      season: null,\n\n      headers: null,\n\n      entries: function() {\n        // TODO: more efficient way to display just the first N elements?\n        return this.get('content').slice(0, 5);\n      }.property('content.[]'),\n\n      content: [],\n\n      startWatching: function() {\n        var watcher = this.container.lookup('watcher:main'),\n            handle = this.get('handle');\n\n        if (handle) {\n          watcher.unwatch(handle);\n        }\n\n        var model = watcher.watch(this.get('type'),\n                                  this.get('entryType'),\n                                  { season: '' + this.get('season') });\n\n        this.set('content', model.get('table'));\n\n        // this is kinda hacky/brittle; this is updated in watcher.watch()\n        this.set('handle', demux.lastId);\n      }.observes('season').on('init')\n    });\n\n\n\n    return Table;\n  });",
    "define(\"appkit/components/bean-team-standing\",\n  [\"appkit/ziggrid/demux\"],\n  function(demux) {\n    \"use strict\";\n\n    var TeamStanding = Ember.Component.extend({\n      _applicationController: Ember.computed(function(){\n        return this.container.lookup('controller:application');\n      }),\n\n      season: Ember.computed.alias('_applicationController.season'),\n      team: null,\n      handle: null,\n      watcher: Ember.computed(function() {\n        return this.container.lookup('watcher:main');\n      }),\n\n      winLoss: function() {\n        var watcher = this.get('watcher');\n        var code = this.get('team.watchCode');\n        var season = this.get('season');\n\n        var handle = this.get('handle');\n\n        if (handle) {\n          // unsubscribe;\n          watcher.unwatch(handle);\n        }\n\n        var subscription = {\n          team: code,\n          season: '' + season\n        };\n\n        console.log('watching', subscription);\n\n        var model = watcher.watch('WinLoss', 'WinLoss', subscription);\n\n        this.set('handle', demux.lastId);\n\n        return model;\n      }.property('team.code', 'season'),\n      wins: Ember.computed.alias('winLoss.wins'),\n      losses: Ember.computed.alias('winLoss.losses')\n    });\n\n\n    return TeamStanding;\n  });",
    "define(\"appkit/controllers/application\",\n  [],\n  function() {\n    \"use strict\";\n    var ApplicationController = Ember.Controller.extend({\n\n      years: [2007, 2008, 2009, 2010, 2011, 2012],\n\n      season: null,\n\n      currentPage: 0,\n\n      // TODO: move to ApplicationView when it works\n      pageContainerStyle: function() {\n        var currentPage = this.get('currentPage');\n        return \"margin-left: \" + (-960 * currentPage) +  \"px;\";\n      }.property('currentPage'),\n\n      actions: {\n        togglePage: function() {\n          this.set('currentPage', +!this.get('currentPage'));\n        }\n      }\n    });\n\n\n    return ApplicationController;\n  });",
    "define(\"appkit/controllers/filter\",\n  [],\n  function() {\n    \"use strict\";\n    var FilterController = Ember.Controller.extend({\n      needs: ['application'],\n\n      years: Ember.computed.sort('controllers.application.years', function(a, b){\n        return (a > b) ? -1 : 1;\n      }),\n\n      selectedFilter: null\n    });\n\n\n    return FilterController;\n  });",
    "define(\"appkit/controllers/filter_item\",\n  [],\n  function() {\n    \"use strict\";\n    var FilterItemController = Ember.ObjectController.extend({\n      isSelected: function() {\n        return this.get('content') === this.get('parentController.selectedFilter');\n      }.property('parentController.selectedFilter')\n    });\n\n\n    return FilterItemController;\n  });",
    "define(\"appkit/controllers/quadrant\",\n  [\"appkit/utils/percentage_of_data\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var percentageOfData = __dependency1__.percentageOfData;\n\n    var get = Ember.get;\n\n    var QuadrantController = Ember.Controller.extend({\n      needs: ['filter', 'application'],\n      filter: Ember.computed.alias('controllers.filter.selectedFilter'),\n      showing: Ember.computed.bool('controllers.application.currentPage'),\n\n      progress: function() {\n        var gameDate = this.get('currentDate');\n\n        if (!gameDate) {\n          return 0;\n        }\n\n        return percentageOfData(gameDate.day, parseInt(gameDate.season, 10));\n      }.property('currentDate'),\n\n      currentDate: Ember.computed.alias('gameDates.lastObject'),\n      //currentDate: { season: '2009', day: '180' },\n\n      currentDateText: function() {\n        var date = this.get('currentDate');\n        if (!date) { return; }\n\n        var season = get(date, 'season');\n        return moment('' + season).day(parseInt(get(date, 'day'), 10) + 1).format('MMMM D, YYYY');\n      }.property('currentDate')\n    });\n\n\n    return QuadrantController;\n  });",
    "define(\"appkit/controllers/quadrant_player\",\n  [],\n  function() {\n    \"use strict\";\n    var QuadrantPlayerController = Ember.ObjectController.extend({\n\n      playerWillChange: function() {\n        var oldPlayer = this.get('content');\n        if (oldPlayer) {\n          oldPlayer.unwatchProfile();\n        }\n      }.observesBefore('content'),\n\n      playerChanged: function() {\n        var newPlayer = this.get('content');\n        if (newPlayer) {\n          newPlayer.watchProfile();\n        }\n      }.observes('content')\n    });\n\n\n\n    return QuadrantPlayerController;\n  });",
    "define(\"appkit/controllers/standings\",\n  [\"appkit/ziggrid/demux\",\"appkit/utils/group_by\"],\n  function(demux, groupBy) {\n    \"use strict\";\n\n    function Region(name, teams) {\n      this.name = name;\n      this.teams = teams;\n    }\n\n    function League(name, teams) {\n      var grouped = groupBy('Division', teams);\n      this.regions = [\n        new Region('East',    grouped.East),\n        new Region('Central', grouped.Central),\n        new Region('West',    grouped.West)\n      ];\n\n      this.name = name;\n    }\n\n    var StandingsController = Ember.Controller.extend({\n      needs: ['application'],\n      season: Ember.computed.alias('controllers.application.season'),\n      leagues: Ember.computed(function(){\n        var TeamListing = this.container.lookupFactory('model:team_listing');\n        var byLeague = TeamListing.allTeamsByLeague;\n\n        return [\n          new League('American League', byLeague.AL),\n          new League('National League', byLeague.NL)\n        ];\n      }),\n      // unique ID assigned by Watcher\n      handle: null,\n\n      startWatching: function() {\n      }.observes('season').on('init')\n    });\n\n\n    return StandingsController;\n  });",
    "define(\"appkit/flags\",\n  [],\n  function() {\n    \"use strict\";\n    var flags = {\n      LOG_WEBSOCKETS: false\n    };\n\n\n    return flags;\n  });",
    "define(\"appkit/initializers/connection_manager\",\n  [\"appkit/ziggrid/connection_manager\"],\n  function(ConnectionManager) {\n    \"use strict\";\n    var url = 'http://couchconf.ziggrid.org:8088/ziggrid/';\n\n\n    var initializer = {\n      name: 'connection-manager',\n      before: 'registerComponents',\n      initialize: function(container, application) {\n        var connectionManager = ConnectionManager.create({\n          url: url,\n          namespace: application\n        });\n\n        application.register('connection_manager:main', connectionManager, {\n          instantiate: false\n        });\n\n        application.inject('component:bean-player',\n                   'connectionManager',\n                   'connection_manager:main');\n      }\n    };\n\n\n    return initializer;\n  });",
    "define(\"appkit/initializers/csv\",\n  [\"appkit/utils/index_by\",\"appkit/utils/group_by\",\"appkit/utils/aggregate_players\",\"appkit/utils/csv\"],\n  function(indexBy, groupBy, aggregatePlayers, csv) {\n    \"use strict\";\n\n    // Load all the csv data\n    var initializer = {\n      name: 'load-csv',\n      initialize: function(container, application) {\n        application.deferReadiness();\n\n        Ember.RSVP.hash({\n          allStars: csv('all-stars.csv'),\n          allTeams: csv('all-teams.csv'),\n          allPlayers: csv('all-players.csv')\n        }).then(function(hash) {\n          application.advanceReadiness();\n\n          var Player = container.lookupFactory('model:player');\n          var TeamListing = container.lookupFactory('model:team_listing');\n\n          // TODO: store object would be better\n          Player.reopenClass({\n            dataByName: indexBy('PlayerCode', hash.allPlayers),\n            allStars: aggregatePlayers(hash.allStars)\n          });\n\n          TeamListing.reopenClass({\n            allTeamsByLeague: groupBy('League', hash.allTeams),\n            allTeams: hash.allTeams\n          });\n\n        }).fail(Ember.RSVP.rethrow);\n      }\n    };\n\n\n    return initializer;\n  });",
    "define(\"appkit/initializers/watcher\",\n  [\"appkit/ziggrid/watcher\"],\n  function(Watcher) {\n    \"use strict\";\n\n    var initializer = {\n      name: 'ziggrid-watcher',\n      initialize: function(container, application) {\n        var watcher = new Watcher(application);\n        application.register('watcher:main', watcher, { instantiate: false });\n      }\n    };\n\n\n    return initializer;\n  });",
    "define(\"appkit/models/player\",\n  [],\n  function() {\n    \"use strict\";\n    var Player = Ember.Object.extend({\n      PlayerName: function(){\n        var code = this.get('code');\n        var playerData = Player.dataByName[code];\n        var name;\n\n        if (playerData) {\n          name = playerData.PlayerName;\n        }\n\n        return name || this.get('name') || code;\n      }.property('code')\n    });\n\n    Player.reopenClass({\n      getPlayerData: function(code) {\n        throw new Error('implement me');\n      },\n\n      nameFromCode: function(code) {\n        var player = this.dataByName[code];\n\n        return player && player.PlayerName;\n      },\n\n      data: undefined,\n      playerCodes: function() {\n        return Ember.keys(this.allStars);\n      }\n    });\n\n\n    return Player;\n  });",
    "define(\"appkit/models/quadrant_player\",\n  [\"appkit/ziggrid/demux\",\"appkit/models/player\",\"appkit/flags\"],\n  function(demux, Player, flags) {\n    \"use strict\";\n\n    var App = window.App;\n\n    var QuadrantPlayer = Ember.Object.extend({\n      init: function(){\n        this._super();\n        QuadrantPlayer.all.pushObject(this);\n        QuadrantPlayer.allByCode[this.get('code')] = this;\n      },\n\n      code: Ember.computed.alias('data.code'),\n\n      realized: false,\n      hotness: 0,\n      goodness: 0,\n      watchHandle: null,\n      imageUrl: function(){\n        return '/players/' + this.get('code') + '.png';\n      }.property('data.name').readOnly(),\n      watching: Ember.computed.bool('watchHandle'),\n\n      // the actual player data resides on the Player mode,\n      // this merely decorates. It is possible for us to have\n      // inconsitent data, has this extra abstractoin\n      data: function() {\n        var name = this.get('name');\n        var data = Player.allStars[name] || {};\n        var playerData = Player.dataByName[name] || {};\n        Ember.merge(data, playerData);\n        return data;\n      }.property('name'),\n\n      hasSeason: function(season) {\n        var seasons = this.get('data.seasons');\n\n        return !!(seasons && seasons[season]);\n      },\n\n      humanizedName: Ember.computed.oneWay('data.PlayerName'),\n\n      watchProfile: function() {\n        // TODO: inject ziggrid:connection-manager\n        var connectionManager = getConnectionManager();\n\n        var handle = ++demux.lastId;\n\n        this.set('watchHandle', handle);\n        this.set('profile', null);\n\n        var player = this;\n\n        demux[handle] = {\n          update: function(data) {\n            player.set('profile', data);\n          }\n        };\n\n        var query = {\n          watch: 'Profile',\n          unique: handle,\n          player: this.get('name')\n        };\n\n        // Send the JSON message to the server to begin observing.\n        var stringified = JSON.stringify(query);\n        connectionManager.send(stringified);\n      },\n\n      unwatchProfile: function() {\n        // TODO: inject ziggrid:connection-manager\n        var connectionManager = getConnectionManager();\n        var watchHandle = this.get('watchHandle');\n\n        if (!watchHandle) {\n          throw new Error('No handle to unwatch');\n        }\n\n        connectionManager.send(JSON.stringify({\n          unwatch: watchHandle\n        }));\n\n        this.set('watchHandle', null); // clear handle\n      }\n    });\n\n    QuadrantPlayer.reopenClass({\n      all: [],\n      allByCode: {},\n      findOrCreateByName: function(playerName) {\n        var player = QuadrantPlayer.all.findProperty('name', playerName);\n\n        if (!player) {\n          player = QuadrantPlayer.create({\n            name: playerName\n          });\n        }\n\n        return player;\n      },\n      watchPlayers: function(playerNames, season, dayOfYear) {\n\n        playerNames.forEach(function(playerName, i) {\n          watchAttribute('Snapshot_playerSeasonToDate',\n                         playerName,\n                         season,\n                         dayOfYear);\n\n          watchAttribute('Snapshot_clutchnessSeasonToDate',\n                         playerName,\n                         season,\n                         dayOfYear);\n\n\n          QuadrantPlayer.findOrCreateByName(playerName);\n        });\n\n        return QuadrantPlayer.all; // TODO: some record array.\n      }\n    });\n\n    function updateQuadrantPlayer(data) {\n      if (flags.LOG_WEBSOCKETS) {\n        console.log('updateQuadrantPlayer', data);\n      }\n\n      var attrs = {\n        realized: true\n      };\n\n      var player = QuadrantPlayer.allByCode[data.player];\n\n      if (data.average) {\n        attrs.goodness = normalizedQuadrantValue(player, 'goodness', data.average);\n      }\n\n      if (data.correlation) {\n        attrs.hotness = normalizedQuadrantValue(player, 'hotness', data.correlation);\n      }\n\n      if (player) {\n        player.setProperties(attrs);\n      } else {\n        attrs.name = data.player;\n        QuadrantPlayer.create(attrs);\n      }\n    }\n\n    function normalizedQuadrantValue(player, key, value) {\n      if (isValidQuadrantValue(value)) {\n        return value;\n      } else {\n        return (player && Ember.get(player, key)) || Math.random();\n      }\n    }\n\n    function isValidQuadrantValue(value) {\n      return value && value >= 0 && value <= 1;\n    }\n\n    function watchAttribute(type, playerName, season, dayOfYear) {\n\n      var handle = ++demux.lastId;\n      demux[handle] = {\n        update: updateQuadrantPlayer\n      };\n\n      var hash = {\n        watch: type,\n        unique: handle,\n        player: playerName//,\n        //season: season\n      };\n\n      if (dayOfYear) {\n        hash.dayOfYear = dayOfYear;\n      }\n\n      // Send the JSON message to the server to begin observing.\n      var stringified = JSON.stringify(hash);\n      getConnectionManager().send(stringified);\n\n      // fireStubbedData(handle, playerName, 500 + i*500);\n    }\n\n    // TODO: inject\n    function getConnectionManager() {\n      return App.__container__.lookup('connection_manager:main');\n    }\n\n\n    return QuadrantPlayer;\n  });",
    "define(\"appkit/models/team_listing\",\n  [],\n  function() {\n    \"use strict\";\n    var TeamListing = Ember.Object.extend({\n    });\n\n    TeamListing.reopenClass({\n      all: []\n    });\n\n\n    return TeamListing;\n  });",
    "define(\"appkit/routes\",\n  [],\n  function() {\n    \"use strict\";\n    function Routes() { }\n\n\n    return Routes;\n  });",
    "define(\"appkit/routes/application\",\n  [\"appkit/models/player\",\"appkit/models/quadrant_player\"],\n  function(Player, QuadrantPlayer) {\n    \"use strict\";\n\n    var season = 2007;\n\n    var ApplicationRoute = Ember.Route.extend({\n      setupController: function(controller) {\n\n        var watcher = this.container.lookup('watcher:main');\n        this.watcher = watcher;\n\n        var gameDates = watcher.watchGameDate();\n\n        controller.set('season', season);\n\n        this.controllerFor('quadrant').set('gameDates', gameDates);\n\n        this.updateQuadrantPlayers(season);\n      },\n\n      updateQuadrantPlayers: function(filter) {\n\n        var filterController = this.controllerFor('filter');\n        filterController.set('selectedFilter', filter);\n\n        // TODO: grab this dynamically from leaderboard.\n\n        var allStarPlayerCodes = this.container.lookupFactory('model:player').playerCodes();\n\n        var players = QuadrantPlayer.watchPlayers(allStarPlayerCodes);\n        this.controllerFor('quadrant').set('players', players);\n      },\n\n      actions: {\n        selectFilter: function(filter) {\n          this.updateQuadrantPlayers(filter);\n        },\n        didBeginPlaying: function() {\n          this.watcher.keepSendingGameDates = true;\n        },\n        didEndPlaying: function() {\n          this.watcher.keepSendingGameDates = false;\n        }\n      }\n    });\n\n\n    return ApplicationRoute;\n  });",
    "define(\"appkit/store\",\n  [\"appkit/adapter\"],\n  function(Adapter) {\n    \"use strict\";\n\n    var Store = DS.Store.extend({\n      adapter: Adapter\n    });\n\n\n    return Store;\n  });",
    "define(\"appkit/utils/aggregate_players\",\n  [],\n  function() {\n    \"use strict\";\n    function aggregatePlayers(players) {\n      var result = { };\n\n      players.forEach(function(entry) {\n        var code = entry.PlayerCode;\n        var player = result[code] = result[code] || {\n          name: entry.PlayerName,\n          code: code,\n          seasons: {}\n        };\n\n        player.seasons[entry.Year] = entry;\n      });\n\n      return result;\n    }\n\n\n    return aggregatePlayers;\n  });",
    "define(\"appkit/utils/csv\",\n  [],\n  function() {\n    \"use strict\";\n\n    return Ember.RSVP.denodeify(d3.csv);\n  });",
    "define(\"appkit/utils/group_by\",\n  [],\n  function() {\n    \"use strict\";\n    var get = Ember.get;\n\n    function groupBy(property, collection) {\n      var index = {};\n\n      collection.forEach(function(entry) {\n        var key = get(entry, property);\n        index[key] = index[key] || [];\n        index[key].push(entry);\n      });\n\n      return index;\n    }\n\n\n    return groupBy;\n  });",
    "define(\"appkit/utils/index_by\",\n  [],\n  function() {\n    \"use strict\";\n    function indexBy(property, collection) {\n      var index = {};\n\n      collection.forEach(function(entry) {\n        index[Ember.get(entry, property)] = entry;\n      });\n\n      return index;\n    }\n\n\n    return indexBy;\n  });",
    "define(\"appkit/utils/percentage_of_data\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ranges = {\n      2007: [ 91, 274 ],\n      2008: [ 85, 274 ],\n      2009: [ 95, 279 ],\n      2010: [ 94, 276 ],\n      2011: [ 90, 271 ],\n      2012: [ 88, 277 ]\n    };\n\n    var seasons = Object.keys(ranges).map(Number);\n\n    function precision(n, p) {\n      return Math.floor(n * p) / p;\n    }\n\n    function normalizeDay(dayOfYear, season) {\n      var range = ranges[season];\n\n      if (!range) { throw new Error('Unknown Season: ' + season); }\n\n      var start = range[0];\n      var end = range[1];\n\n      var totalGameDaysInSeason = end - start;\n      var normalizedGameDay = dayOfYear - start;\n\n      return normalizedGameDay;\n    }\n\n    function percentageOfSeason(dayOfYear, season) {\n      var range = ranges[season];\n\n      if (!range) { throw new Error('Unknown Season: ' + season); }\n\n      var start = range[0];\n      var end = range[1];\n\n      var totalGameDaysInSeason = end - start;\n      var normalizedGameDay = normalizeDay(dayOfYear, season);\n\n      return precision(normalizedGameDay / totalGameDaysInSeason, 100);\n    }\n\n    function percentageOfData(dayOfYear, season) {\n      var range = ranges[season];\n      if (!range) { throw new Error('Unknown Season: ' + season); }\n\n      var index = seasons.indexOf(season);\n      var normalizedGameDay = normalizeDay(dayOfYear, season);\n\n      var proportion = ((index * 180) + normalizedGameDay) / 1108;\n      return precision(proportion, 100);\n    }\n\n\n    __exports__.percentageOfSeason = percentageOfSeason;\n    __exports__.percentageOfData = percentageOfData;\n    __exports__.precision = precision;\n  });",
    "define(\"appkit/views/filter\",\n  [],\n  function() {\n    \"use strict\";\n    var FilterView = Ember.View.extend({\n      elementId: 'filter-view'\n    });\n\n\n    return FilterView;\n  });",
    "define(\"appkit/ziggrid/connection_manager\",\n  [\"appkit/ziggrid/generator\",\"appkit/ziggrid/observer\",\"appkit/ziggrid/demux\",\"appkit/flags\"],\n  function(Generator, Observer, demux, flags) {\n    \"use strict\";\n\n    var ConnectionManager = Ember.Object.extend({\n\n      url: null,\n\n      // Reference to the global app namespace where we'll be installing\n      // dynamically generated DS.Model classes\n      namespace: null,\n\n      generator: null,\n\n      establishConnection: function() {\n\n        var self = this;\n\n        this.observers = {};\n        this.initNeeded = 1;\n        this.initCompleted = 0;\n\n        var messages = [];\n\n        var conn = this.conn = jQuery.atmosphere.subscribe({\n          url: this.url + 'updates',\n          transport: 'websocket',\n          fallbackTransport: 'long-polling',\n\n          // handle the 'open' message\n          onOpen: function(response) {\n            conn.push(JSON.stringify({ action: 'init' }));\n          },\n\n          // and then handle each incoming message\n          onMessage: function(msg) {\n            // Have to clone because jQuery atmosphere reuses response objects.\n            messages.push({\n              status: msg.status,\n              responseBody: msg.responseBody\n            });\n            Ember.run.throttle(self, 'flushMessages', messages, 150);\n          }\n        });\n      }.on('init'),\n\n      flushMessages: function(messages) {\n        while (messages.length) {\n          var message = messages.shift();\n          this.handleMessage(message);\n        }\n      },\n\n      handleMessage: function(msg) {\n        if (msg.status === 200) {\n\n          if (flags.LOG_WEBSOCKETS) {\n            console.log('Received message ' + msg.responseBody);\n          }\n\n          var body = JSON.parse(msg.responseBody);\n\n          if (body['deliveryFor']) {\n            // TODO: shouldn't this be in observer.js?\n            var h = demux[body['deliveryFor']];\n            if (h && h.update) {\n              if (body.payload.table) {\n                // Assume tabular data\n                h.update(body.payload.table);\n              } else {\n                h.update(body.payload);\n              }\n            }\n          } else if (body['error']) {\n            console.error(body['error']);\n          } else if (body['modelName']) {\n            this.registerModel(body.modelName, body.model);\n          } else if (body['server']) {\n            var endpoint = body.endpoint,\n            addr = 'http://' + endpoint + '/ziggrid/',\n            server = body.server;\n\n            if (flags.LOG_WEBSOCKETS) {\n              console.log('Have new ' + server + ' server at ' + endpoint);\n            }\n            this.registerServer(server, addr);\n\n          } else if (body['status']) {\n            var stat = body['status'];\n            if (stat === 'initdone') {\n              this.initDone();\n            } else {\n              console.log('Do not recognize ' + stat);\n            }\n          } else\n            console.log('could not understand ' + msg.responseBody);\n        } else {\n          console.log('HTTP Error:', msg.status);\n          //if (callback && callback.error)\n          //callback.error('HTTP Error: ' + msg.status);\n        }\n      },\n\n      registerModel: function(name, model) {\n        var attrs = {};\n        for (var p in model) {\n          if (!model.hasOwnProperty(p)) { continue; }\n\n          var type = model[p];\n          if (type.rel === 'attr') {\n            attrs[p] = DS.attr(type.name);\n          } else if (type.rel === 'hasMany') {\n            attrs[p] = DS.hasMany('App.' + type.name.capitalize());\n          } else {\n            console.log('Unknown type:', type);\n          }\n        }\n\n        var newClass = DS.Model.extend(attrs);\n        newClass.reopenClass({\n          model: model\n        });\n\n        this.namespace[name] = newClass;\n      },\n\n      registerServer: function(server, addr) {\n        var self = this;\n        if (server === 'generator') {\n          this.set('generator', Generator.create(addr));\n        } else if (server === 'ziggrid') {\n          //return;\n          if (!this.observers[addr]) {\n            this.initNeeded++;\n\n            this.observers[addr] = Observer.create(addr, function() {\n              self.observers[addr] = self.conn;\n              self.initDone();\n            });\n          }\n        }\n      },\n\n      initDone: function() {\n        if (++this.initCompleted === this.initNeeded) {\n          window.App.advanceReadiness();\n        }\n      },\n\n      send: function(msg) {\n        var observers = this.observers;\n\n        if (flags.LOG_WEBSOCKETS) {\n          console.log('sending ', msg, 'to', observers);\n        }\n\n        for (var u in observers) {\n          if (observers.hasOwnProperty(u)) {\n            observers[u].push(msg);\n          }\n        }\n      }\n    });\n\n\n    return ConnectionManager;\n  });",
    "define(\"appkit/ziggrid/demux\",\n  [],\n  function() {\n    \"use strict\";\n\n    // TODO: better place for this? global var exports ftw\n\n    var demux = {\n      lastId: 0\n    };\n\n\n\n    return demux;\n  });",
    "define(\"appkit/ziggrid/generator\",\n  [\"appkit/flags\"],\n  function(flags) {\n    \"use strict\";\n\n    function Generator(url, callback) {\n      var open = {\n        url: url + 'generator',\n        transport: 'websocket',\n        fallbackTransport: 'long-polling',\n\n        onOpen: function(response) {\n          if (flags.LOG_WEBSOCKETS) {\n            console.log('opened generator connection with response', response);\n          }\n        },\n\n        // and then handle each incoming message\n        onMessage: function(msg) {\n          if (msg.status === 200) {\n            if (flags.LOG_WEBSOCKETS) {\n              console.log(msg.responseBody);\n            }\n            var body = JSON.parse(msg.responseBody);\n          } else {\n            console.log('Generator HTTP Error:', msg.status);\n          }\n        }\n      };\n\n      var conn = this.conn = jQuery.atmosphere.subscribe(open);\n    }\n\n    Generator.prototype = {\n\n      hasSetDelay: false,\n\n      send: function(msg) {\n        console.log('Sending generator message', msg);\n        this.conn.push(msg);\n      },\n\n      start: function() {\n        if (!this.hasSetDelay) {\n          // Don't overload the generator; give it a moderate delay the first time.\n          this.setDelay(20);\n          this.hasSetDelay = true;\n        }\n\n        this.send(JSON.stringify({'action':'start'}));\n      },\n\n      stop: function() {\n        this.send(JSON.stringify({'action':'stop'}));\n      },\n\n      setDelay: function(ms) {\n        this.send(JSON.stringify({'action':'delay','size':ms}));\n      }\n    };\n\n    Generator.create = function(url, callback) {\n      return new Generator(url, callback);\n    };\n\n\n\n    return Generator;\n  });",
    "define(\"appkit/ziggrid/observer\",\n  [\"appkit/ziggrid/demux\",\"appkit/flags\"],\n  function(demux, flags) {\n    \"use strict\";\n\n    function Observer(url, callback) {\n\n      url = url + 'updates';\n\n      if (flags.LOG_WEBSOCKETS) {\n        console.log('Observer connecting at ' + url);\n      }\n\n      var conn = jQuery.atmosphere.subscribe({\n        url: url,\n\n        transport: 'websocket',\n        fallbackTransport: 'long-polling',\n\n        onOpen: function(response) {\n          callback(conn);\n        },\n\n        onMessage: function(msg) {\n          if (msg.status === 200) {\n            // TODO: why are we still getting deliveryFor messages in connectionManager?\n            if (flags.LOG_WEBSOCKETS) {\n              console.log('Received message ' + msg.responseBody);\n            }\n            var body = JSON.parse(msg.responseBody);\n            if (body['deliveryFor']) {\n              var h = demux[body['deliveryFor']];\n              if (h && h.update)\n                h.update(body['table']);\n            } else {\n              console.error('unknown message type');\n            }\n          } else {\n            console.error('HTTP error');\n          }\n        }\n      });\n    }\n\n    Observer.create = function(url, callback) {\n      return new Observer(url, callback);\n    };\n\n\n    return Observer;\n  });",
    "define(\"appkit/ziggrid/watcher\",\n  [\"appkit/ziggrid/demux\"],\n  function(demux) {\n    \"use strict\";\n\n    var container;\n\n    function Loader(type, entryType, id) {\n      var store = container.lookup('store:main');\n\n      this.update = type === entryType ? updateIndividualThing : updateTabularData;\n\n      function updateTabularData(body) {\n        var rows = [];\n\n        for (var i = 0; i < body.length; i++) {\n          var item = body[i];\n\n          var attrs = {};\n          attrs[Ember.keys(entryType.model)[0]] = item[0];\n\n          store.load(entryType, item[1], attrs);\n          rows.push(item[1]);\n        }\n\n        store.load(type, id, {\n          table: rows\n        });\n      }\n\n      function updateIndividualThing(body) {\n        body.handle_id = id;\n        store.load(type, body.id || id, body);\n      }\n    }\n\n    function Watcher(_namespace) {\n      this.namespace = _namespace;\n      container = this.container = _namespace.__container__;\n    }\n\n    var gameDates = [];\n\n    Watcher.prototype = {\n      watchGameDate: function() {\n        var handle = ++demux.lastId;\n\n        demux[handle] = {\n          update: function(a) {\n            gameDates.pushObject(a);\n          }\n        };\n\n        var query = {\n          watch: 'GameDate',\n          unique: handle\n        };\n\n        var stringified = JSON.stringify(query);\n\n        var connectionManager = container.lookup('connection_manager:main');\n        connectionManager.send(stringified);\n\n        //this.sendFakeGameDates();\n\n        return gameDates;\n      },\n\n      keepSendingGameDates: false,\n      sendFakeGameDates: function() {\n\n        if (this.keepSendingGameDates) {\n          gameDates.pushObject({\n            day: gameDates.length\n          });\n        }\n\n        Ember.run.later(this, 'sendFakeGameDates', 400);\n      },\n\n      watch: function(typeName, entryTypeName, opts, updateHandler) {\n        var type = this.namespace[typeName]; // ED limitation\n        var handle = ++demux.lastId;\n        var store = container.lookup('store:main');\n\n        store.load(type, handle, {});\n\n        var model = store.find(type, handle);\n        var hash = $.extend({\n          watch: typeName,\n          unique: handle\n        }, opts);\n\n        var entryType = this.namespace[entryTypeName];\n\n        demux[handle] = updateHandler ? { update: updateHandler } :\n                        new Loader(type, entryType, model.get('id'), opts);\n\n        var stringified = JSON.stringify(hash);\n\n        // TODO: Change this to forward to ZiggridObserver.\n\n        // Send the JSON message to the server to begin observing.\n        var connectionManager = container.lookup('connection_manager:main');\n        connectionManager.send(stringified);\n\n        return model;\n      },\n\n      unwatch: function(handle) {\n        var connectionManager = container.lookup('connection_manager:main');\n        connectionManager.send(JSON.stringify({ unwatch: handle }));\n      }\n    };\n\n\n    return Watcher;\n  });"
  ]
}